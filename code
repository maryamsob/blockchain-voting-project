class Candidate:
    def __init__(self, name):
        self.name = name
        self.vote_count = 0


class StudentVoting:
    def __init__(self, candidate_names):
        self.candidates = {}

        # Initialize candidates
        for name in candidate_names:
            self.candidates[name.lower()] = Candidate(name)

    def vote(self, candidate_name):
        name_key = candidate_name.lower()

        if name_key not in self.candidates:
            raise Exception("Invalid candidate name!")

        self.candidates[name_key].vote_count += 1
        print(f"Voted for {candidate_name.capitalize()}")

    def get_candidate_votes(self, candidate_name):
        name_key = candidate_name.lower()
        if name_key not in self.candidates:
            raise Exception("Invalid candidate name!")
        return self.candidates[name_key].vote_count

    def get_winner(self):
        max_votes = 0
        winner_name = None

        for candidate in self.candidates.values():
            if candidate.vote_count > max_votes:
                max_votes = candidate.vote_count
                winner_name = candidate.name

        if winner_name is None:
            return None, 0
        return winner_name, max_votes


# Example Usage
if __name__ == "__main__":
    # Create voting system with given candidates
    election = StudentVoting(["maryam", "fathima", "aysha"])

    # Simulate votes (you can change or add more)
    election.vote("maryam")
    election.vote("fathima")
    election.vote("maryam")
    election.vote("aysha")
    election.vote("maryam")

    # Print votes for each candidate
    print("\nVote Counts:")
    for name in ["maryam", "fathima", "aysha"]:
        print(f"{name.capitalize()}: {election.get_candidate_votes(name)} votes")

    # Get winner
    winner_name, winner_votes = election.get_winner()
    print(f"\nWinner: {winner_name.capitalize()} with {winner_votes} votes")
